name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Build
      run: go build -v ./cmd/easyClean

    - name: Run easyClean --help (Unix)
      if: runner.os != 'Windows'
      run: ./easyClean --help

    - name: Run easyClean --help (Windows)
      if: runner.os == 'Windows'
      run: .\easyClean.exe --help

    - name: Test init command
      run: |
        ./easyClean init --template minimal || true
        test -f .unusedassets.yaml || echo "Config file not created"
      if: runner.os != 'Windows'

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24'
      with:
        files: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        OUTPUT_NAME=easyClean-${{ matrix.goos }}-${{ matrix.goarch }}
        if [ "${{ matrix.goos }}" = "windows" ]; then
          OUTPUT_NAME="${OUTPUT_NAME}.exe"
        fi
        go build -v -ldflags="-s -w" -o "$OUTPUT_NAME" ./cmd/easyClean
        ls -lh "$OUTPUT_NAME"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: easyClean-${{ matrix.goos }}-${{ matrix.goarch }}
        path: easyClean-*
        retention-days: 30
